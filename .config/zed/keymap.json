[
  {
    "context": "Editor && edit_prediction_conflict",
    "bindings": {
      // Here we bind tab to accept even when there's a language server completion
      // or the cursor isn't at the correct indentation level
      "tab": "editor::AcceptEditPrediction"
    }
  },
  // {
  //   "context": "Editor && edit_prediction",
  //   "bindings": {
  //     // Here we also allow `alt-enter` to accept the prediction
  //     "alt-enter": "editor::AcceptEditPrediction"
  //   }
  // },
  {
    "context": "Editor && VimControl && !VimWaiting && !menu",
    // Redefine window navigation keys to use Vim-style hjkl
    "bindings": {
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ActivatePaneDown"
    }
  },
  {
    "context": "Editor && (vim_mode == normal || vim_mode == visual) && !VimWaiting && !menu",
    "bindings": {
      // put key-bindings here if you want them to work in normal & visual mode
    }
  },
  {
    "context": "Editor && vim_mode == normal && !VimWaiting && !menu",
    "bindings": {
      // put key-bindings here if you want them to work only in normal mode
      "down": ["workspace::SendKeystrokes", "4 j"],
      "up": ["workspace::SendKeystrokes", "4 k"],

      // Mimic my neovim bindings
      "space f f": "file_finder::Toggle",
      "space f g": "pane::DeploySearch",
      "space c r": "editor::Rename",
      "space c a": "editor::ToggleCodeActions",
      "shift-k": "editor::Hover",
      "g d": "editor::GoToDefinition",
      "g r": "editor::FindAllReferences"
    }
  },
  {
    "context": "Editor && vim_mode == visual && !VimWaiting && !menu",
    "bindings": {
      // visual, visual line & visual block modes
    }
  },
  {
    "context": "Editor && vim_mode == insert && !menu",
    "bindings": {
      // put key-bindings here if you want them to work in insert mode
      // e.g.
      "j j": "vim::NormalBefore" // remap jj in insert mode to escape.
    }
  },
  {
    "context": "Dock",
    "bindings": {
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ActivatePaneDown"
    }
  }
]
